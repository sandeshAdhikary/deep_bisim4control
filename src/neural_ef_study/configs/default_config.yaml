study:
  storage:
      type: ssh
      host: ${oc.env:SSH_HOST}
      username: ${oc.env:SSH_USERNAME}
      password: ${oc.env:SSH_PASSWORD}
      root_dir: ${oc.env:SSH_DIR}/${..name}
      overwrite: false
  database:
      type: mysql
      name: ${..name} 
      host: ${oc.env:MYSQL_HOST}
      username: ${oc.env:MYSQL_USERNAME}
      password: ${oc.env:MYSQL_PASSWORD}
  metrics: 
      loss:
        name: loss
trainer:
  project: ${..project.project}
  module_path: ${..project.trainer_module_path}
  # module_path: src.neural_ef_study.modules.NeuralEFTrainer
  num_epochs: 1_000_000
  terminal_display: rich
  eval_freq: 20
  save_checkpoint_freq: 1_000_000
  num_samples: 400
  batch_size: 256
  domain: ${..project.domain}
  metrics: 
      loss:
        name: loss
      model_weights:
        name: model_weights
  evaluator:
    module_path: ${...project.evaluator_module_path}
    # module_path: src.neural_ef_study.modules.NeuralEFEvaluator
    batch_size: 400
    async_eval: false
    metrics: 
        loss:
          name: loss
  storage:
    input:
      type: ssh
      root_dir: ${....study.storage.root_dir}
      sub_dir: train
      host: ${oc.env:SSH_HOST}
      username: ${oc.env:SSH_USERNAME}
      password: ${oc.env:SSH_PASSWORD}
    output:
      type: ssh
      root_dir: ${....study.storage.root_dir}
      sub_dir: train
      host: ${oc.env:SSH_HOST}
      username: ${oc.env:SSH_USERNAME}
      password: ${oc.env:SSH_PASSWORD}
model:
  project: ${..project.project}
  module_path: ${..project.model_module_path}
  # module_path: src.neural_ef_study.modules.NeuralEFModel
  encoder_dim: 10
  domain: ${..project.domain}
  optimizer: ${..project.optimizer}
  scheduler: ${..project.scheduler}
  hidden_dim: ${..project.model_hidden_dim}
  nonlinearity: sin_and_cos
logger:
  project: ${..project.project}
  module_path: trainer.logger.Logger
  sw: wandb
  dir: ${oc.env:LOG_DIR}
  tracked_params: ${model}
  num_epochs: ${..trainer.num_epochs}
  # num_train_steps: ${..trainer.num_train_steps}
  eval_freq: ${..trainer.eval_freq}
  cleanup: true # delete logdir after training
  log_freq: 100_000 # epochs
sweeper:
  project: ${..project.project}
  method: grid
  sweeper_type: wandb
  name: ???
  load_runs_from_queue: true
  heartbeat_timeout: 5
  parameters: ???